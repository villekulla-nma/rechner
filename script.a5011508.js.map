{"version":3,"sources":["script.js"],"names":["STRATEGY_EXACT","STRATEGY_ROUNDED","units","form","document","getElementById","amountInput","strategySelect","devianceElement","updateValue","unit","value","requestAnimationFrame","Object","assign","computeShares","totalValue","entries","map","share","result","exact","rounded","toFixed","computeDeviance","shares","reduce","acc","printDeviance","deviance","textContent","String","preventSubmit","event","preventDefault","handleChange","HTMLInputElement","HTMLSelectElement","totalAmount","trim","parseFloat","forEach","addEventListener"],"mappings":";AAmHA,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,6IAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,IAAA,oBAAA,QAAA,EAAA,OAAA,WAAA,EAAA,eAAA,GAAA,MAAA,EAAA,CAAA,IAAA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,GAAA,EAAA,IAAA,IAAA,EAAA,EAAA,KAAA,KAAA,GAAA,EAAA,EAAA,QAAA,QAAA,EAAA,KAAA,EAAA,QAAA,GAAA,EAAA,SAAA,GAAA,GAAA,IAAA,MAAA,GAAA,GAAA,EAAA,EAAA,EAAA,QAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,GAAA,OAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAzGA,IAAMA,EAAiB,QAGjBC,EAAmB,UAGnBC,EAAQ,CACP,GAAA,WACA,GAAA,WACA,IAAA,WACA,IAAA,WACA,IAAA,UACA,IAAA,WACA,IAAA,WACA,IAAA,YAIDC,EAAOC,SAASC,eAAe,cAG/BC,EAAcF,SAASC,eAAe,UAGtCE,EAAiBH,SAASC,eAAe,YAGzCG,EAAkBJ,SAASC,eAAe,YAO1CI,EAAc,SAACC,EAAMC,GACzBC,sBAAsB,WACpBC,OAAAA,OAAOC,OAAOV,SAASC,eAAyBK,UAAAA,OAAAA,IAAS,CACvDC,MAAAA,OASAI,EAAgB,SAACC,GACrBH,OAAAA,OAAOI,QAAQf,GAAOgB,IAAI,SAAmB,GAAA,IAAA,EAAA,EAAA,EAAA,GAAjBR,EAAiB,EAAA,GAAXS,EAAW,EAAA,GACrCC,EAASJ,EAAaG,EAErB,MAAA,CACLE,MAAOD,EACPE,QAASF,EAAOG,QAAQ,GACxBb,KAAAA,MASAc,EAAkB,SAACR,EAAYS,GAG5BT,OAAAA,EAFKS,EAAOC,OAAO,SAACC,EAAD,GAAoBA,OAAAA,EAAZN,EAAAA,OAAyB,IASvDO,EAAgB,SAACC,GACrBjB,sBAAsB,WACpBJ,EAAgBsB,YAAcC,OAAOF,MAOnCG,EAAgB,SAACC,GACrBA,EAAMC,kBAGFC,EAAe,WAEjB7B,GAAAA,aAAuB8B,kBACvB7B,aAA0B8B,kBAC1B,CACMC,IAAAA,EAAchC,EAAYK,MAAM4B,OAClCC,WAAWlC,EAAYK,MAAM4B,QAC7B,EACEd,EAASV,EAAcuB,GAE7BV,EAAcJ,EAAgBc,EAAab,IAE3CA,EAAOgB,QAAQ,SAACtB,GACdV,OAAAA,EAAYU,EAAMT,KAAMS,EAAMZ,EAAeI,YAKnDR,EAAKuC,iBAAiB,SAAUV,GAChC1B,EAAYoC,iBAAiB,QAASP,GACtC5B,EAAemC,iBAAiB,SAAUP","file":"script.a5011508.js","sourceRoot":"../src","sourcesContent":["// @ts-check\n\n/**\n * @typedef {Object} Unit\n * @property {string} unit\n * @property {number} exact\n * @property {string} rounded\n */\n\n/** @type {string} */\nconst STRATEGY_EXACT = 'exact';\n\n/** @type {string} */\nconst STRATEGY_ROUNDED = 'rounded';\n\n/** @type {Record<number, number>} */\nconst units = {\n  0.1: 0.073394152,\n  0.2: 0.146800784,\n  1.1: 0.136454966,\n  2.1: 0.128517765,\n  3.1: 0.13812727,\n  3.2: 0.161888954,\n  4.1: 0.126483545,\n  4.2: 0.088332564,\n};\n\n/** @type {HTMLElement | null} */\nconst form = document.getElementById('calculator');\n\n/** @type {HTMLElement | null} */\nconst amountInput = document.getElementById('amount');\n\n/** @type {HTMLElement | null} */\nconst strategySelect = document.getElementById('strategy');\n\n/** @type {HTMLElement | null} */\nconst devianceElement = document.getElementById('deviance');\n\n/**\n * @param {string} unit\n * @param {number} value\n * @returns {void}\n */\nconst updateValue = (unit, value) => {\n  requestAnimationFrame(() =>\n    Object.assign(document.getElementById(`result-${unit}`), {\n      value,\n    })\n  );\n};\n\n/**\n * @param {number} totalValue\n * @returns {Unit[]}\n */\nconst computeShares = (totalValue) =>\n  Object.entries(units).map(([unit, share]) => {\n    const result = totalValue * share;\n\n    return {\n      exact: result,\n      rounded: result.toFixed(2),\n      unit,\n    };\n  });\n\n/**\n * @param {number} totalValue\n * @param {Unit[]} shares\n * @returns {number}\n */\nconst computeDeviance = (totalValue, shares) => {\n  const sum = shares.reduce((acc, { exact }) => acc + exact, 0);\n\n  return totalValue - sum;\n};\n\n/**\n * @param {number} deviance\n * @returns {void}\n */\nconst printDeviance = (deviance) => {\n  requestAnimationFrame(() => {\n    devianceElement.textContent = String(deviance);\n  });\n};\n\n/**\n * @param {Event} event\n */\nconst preventSubmit = (event) => {\n  event.preventDefault();\n};\n\nconst handleChange = () => {\n  if (\n    amountInput instanceof HTMLInputElement &&\n    strategySelect instanceof HTMLSelectElement\n  ) {\n    const totalAmount = amountInput.value.trim()\n      ? parseFloat(amountInput.value.trim())\n      : 0;\n    const shares = computeShares(totalAmount);\n\n    printDeviance(computeDeviance(totalAmount, shares));\n\n    shares.forEach((share) =>\n      updateValue(share.unit, share[strategySelect.value])\n    );\n  }\n};\n\nform.addEventListener('submit', preventSubmit);\namountInput.addEventListener('input', handleChange);\nstrategySelect.addEventListener('change', handleChange);\n"]}